const MiniCssExtractPlugin=require('mini-css-extract-plugin')
const OptimizeCssAssetsWebpackPlugin=require('optimize-css-assets-webpack-plugin')
const HtmlWebpackPlugin=require('html-webpack-plugin');
const {resolve}=require('path')
process.env.NODE_ENV='development'//定义nodejs环境变量：决定在css兼容中，采用browserlist的哪个方面，默认生产环境
module.exports={
    entry:'./src/js/index.js',
    ouput:{
        filename:'js/built.js',
        path:resolve(__dirname,'build')
    },
    module:{
        rules:[
            {
                test:/\.css$/,
                use:[
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    {
                        //还需要在package.json中定义broswerlist
                        loader:'postcss-loader',
                        option:{
                            ident:'postcss',
                            plugin:()=>[require('postcss-preset-env')()]
                                
                        }
                    }
                ]
            },
            {
                test:/\.less$/,
                use:[
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    {
                        loader:'postcss-loader',
                        option:{
                            ident:'postcss',
                            plugin:()=>[require('postcss-preset-env')()]
                                
                        }
                    },
                    'less-loader'
                ]
            },
            /*
                正常来讲，一个文件只能被一个loader处理，
                当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序
                要先执行eslint，再执行babel，
                因为语法一旦出错，就没必要去做语法兼容了
            */
            {
                //js语法检查
                //在package.json中eslintConfig配置所用的airbnb库
                test:/\.js$/,
                exclude:'/node_modules/',
                //同类文件，优先执行此loader
                enforce:'pre',
                loader:'eslint-loader',
                options:{
                    fix:true,
                }
            },
            {
                //js兼容性处理
                //在package.json中eslintConfig配置所用的airbnb库
                test:/\.js$/,
                exclude:'/node_modules/',
                loader:'babel-loader',
                options:{
                    presets:[
                        [
                            '@babel/preset-env',
                            {
                                useBuiltIns:'usage',
                                corejs:{
                                    version:3
                                },
                                targets:{
                                    chrome:'60',
                                    firefox:'50'
                                }
                            }
                        ]
                    ]
                }
            },
            {
                test:/\.(jpeg|jpg|png|gif)$/,
                loader:'url-loader',
                options:{
                    limit:8*1024,
                    name:'[hash:10].[ext]',
                    outputPath:'imgs',
                    esModule: false,//html的图片问题
                }
            },
            {
                //html的图片问题
                test:/\.html$/,
                loader:'html-loader',   
            },
            {
                exclude:/\.(js|css|less|html|jpg|jepg|png|gif)$/,
                loader:'file-loader',
                options:{
                    name:'[hash:10].[ext]',
                    outputPath:'others'
                }
            }
        ]
    },
    plugin:[
        //提取css为独立的文件
        new MiniCssExtractPlugin({
            filename:'css/built.css'
        }),
        //压缩css
        new OptimizeCssAssetsWebpackPlugin(),
        //
        new HtmlWebpackPlugin({
            template:'./src/index.html',
            minify:{
                collapseWhitespace:true,
                removeComments:true
            }
        })
    ],
    mode:'production'
}